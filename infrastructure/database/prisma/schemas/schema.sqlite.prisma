// Este es tu archivo de esquema de Prisma para SQLite
// Aprende más sobre él en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_SQLITE")
}

// ###############################################################
// # 1. UNIVERSIDAD, FACULTADES Y DEPARTAMENTOS
// ###############################################################
model University {
  id        Int       @id @default(autoincrement())
  name      String
  country   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  faculties Faculty[]
  campuses  Campus[]

  @@map("university")
}

model Faculty {
  id           Int        @id @default(autoincrement())
  universityId Int
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  deletedAt    DateTime?

  // Relaciones
  university  University   @relation(fields: [universityId], references: [id])
  departments Department[]

  @@map("faculty")
  @@index([universityId])
}

model Department {
  id        Int       @id @default(autoincrement())
  facultyId Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  faculty             Faculty               @relation(fields: [facultyId], references: [id])
  careers             Career[]
  administrativeStaff AdministrativeStaff[]

  @@map("department")
  @@index([facultyId])
}

// ###############################################################
// # 2. CAMPUS, AULAS Y HORARIOS
// ###############################################################
model Campus {
  id           Int        @id @default(autoincrement())
  universityId Int
  name         String
  location     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  deletedAt    DateTime?

  // Relaciones
  university   University     @relation(fields: [universityId], references: [id])
  classrooms   Classroom[]
  students     Student[]
  careerCampus CareerCampus[]

  @@map("campus")
  @@index([universityId])
}

model Classroom {
  id        Int       @id @default(autoincrement())
  campusId  Int
  name      String
  capacity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  campus    Campus    @relation(fields: [campusId], references: [id])
  sections  Section[]

  @@map("classroom")
  @@index([campusId])
}

model Term {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relaciones
  sections        Section[]
  academicRecords AcademicRecord[]
  enrollments     Enrollment[]

  @@map("term")
}

model SessionTime {
  id        Int       @id @default(autoincrement())
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  createdAt DateTime  @default(now())

  // Relaciones
  sections  Section[]

  @@map("session_time")
}

// ###############################################################
// # 3. CARRERAS, CURSOS Y PRERREQUISITOS
// ###############################################################
model Career {
  id           Int        @id @default(autoincrement())
  departmentId Int?
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  // Relaciones
  department   Department?    @relation(fields: [departmentId], references: [id])
  courses      Course[]
  students     Student[]
  applications Application[]
  careerCampus CareerCampus[]
  studyPlans   StudyPlan[]

  @@map("career")
  @@index([departmentId])
}

model CareerCampus {
  careerId Int
  campusId Int

  // Relaciones
  career Career @relation(fields: [careerId], references: [id])
  campus Campus @relation(fields: [campusId], references: [id])

  @@id([careerId, campusId])
  @@map("career_campus")
}

model Course {
  id        Int      @id @default(autoincrement())
  careerId  Int
  code      String   @unique
  name      String
  credits   Int
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  // Relaciones
  career           Career             @relation(fields: [careerId], references: [id])
  sections         Section[]
  exams            Exam[]
  practices        Practice[]
  assignments      Assignment[]
  academicRecords  AcademicRecord[]
  studyPlanCourses StudyPlanCourse[]

  // Auto-relación para prerrequisitos
  prerequisites   CoursePrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CoursePrerequisite[] @relation("PrerequisiteToCourse")

  @@map("course")
  @@index([careerId])
}

model CoursePrerequisite {
  courseId       Int
  prerequisiteId Int

  // Relaciones
  course       Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])

  @@id([courseId, prerequisiteId])
  @@map("course_prerequisite")
  @@index([courseId])
  @@index([prerequisiteId])
}

// ###############################################################
// # 4. PERSONAS, USUARIOS Y ROLES
// ###############################################################
model Person {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  user                User?
  professor           Professor?
  student             Student?
  administrativeStaff AdministrativeStaff?

  @@map("person")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String
  personId     Int       @unique
  roleId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  // Relaciones
  person         Person          @relation(fields: [personId], references: [id])
  role           Role            @relation(fields: [roleId], references: [id])
  posts          Post[]
  notifications  Notification[]
  teacherRatings TeacherRating[]
  threads        Thread[]
  applications   Application[]
  reports        Report[]

  @@map("user")
  @@index([personId])
  @@index([roleId])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relaciones
  users User[]

  @@map("role")
}

// ###############################################################
// # 5. PROFESORES Y ESTUDIANTES
// ###############################################################
model Professor {
  id        Int       @id @default(autoincrement())
  personId  Int       @unique
  hireDate  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  person         Person          @relation(fields: [personId], references: [id])
  sections       Section[]
  reports        Report[]
  teacherRatings TeacherRating[]

  @@map("professor")
  @@index([personId])
}

model Student {
  id             Int        @id @default(autoincrement())
  personId       Int        @unique
  careerId       Int
  campusId       Int
  enrollmentDate DateTime
  status         String     @default("activo")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  deletedAt      DateTime?

  // Relaciones
  person          Person           @relation(fields: [personId], references: [id])
  career          Career           @relation(fields: [careerId], references: [id])
  campus          Campus           @relation(fields: [campusId], references: [id])
  enrollments     Enrollment[]
  academicRecords AcademicRecord[]
  studyPlans      StudyPlan[]
  submissions     Submission[]
  invoices        Invoice[]

  @@map("student")
  @@index([personId])
  @@index([careerId])
  @@index([campusId])
}

// ###############################################################
// # 6. SECCIONES, MATRÍCULAS Y REGISTROS ACADÉMICOS
// ###############################################################
model Section {
  id            Int        @id @default(autoincrement())
  courseId      Int
  termId        Int
  sessionTimeId Int
  professorId   Int
  classroomId   Int
  capacity      Int        @default(30)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  deletedAt     DateTime?

  // Relaciones
  course          Course         @relation(fields: [courseId], references: [id])
  term            Term           @relation(fields: [termId], references: [id])
  sessionTime     SessionTime    @relation(fields: [sessionTimeId], references: [id])
  professor       Professor      @relation(fields: [professorId], references: [id])
  classroom       Classroom      @relation(fields: [classroomId], references: [id])
  enrollments     Enrollment[]
  academicRecords AcademicRecord[] // CORRECCIÓN: Esta relación ahora es válida.
  exams           Exam[]

  @@map("section")
  @@index([courseId])
  @@index([termId])
  @@index([sessionTimeId])
  @@index([professorId])
  @@index([classroomId])
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  studentId Int
  sectionId Int
  termId    Int
  status    String    @default("matriculado")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  student Student @relation(fields: [studentId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])
  term    Term    @relation(fields: [termId], references: [id])

  @@map("enrollment")
  @@unique([studentId, sectionId, termId])
  @@index([studentId])
  @@index([sectionId])
  @@index([termId])
}

model AcademicRecord {
  id        Int       @id @default(autoincrement())
  studentId Int
  courseId  Int
  termId    Int
  sectionId Int // CORRECCIÓN: Se añadió el campo para relacionar con Section.
  grade     Float?
  status    String    @default("en_curso")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relaciones
  student   Student   @relation(fields: [studentId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
  term      Term      @relation(fields: [termId], references: [id])
  section   Section   @relation(fields: [sectionId], references: [id]) // CORRECCIÓN: Se añadió la relación inversa.

  @@map("academic_record")
  @@unique([studentId, sectionId]) // CORRECCIÓN: Se actualizó la restricción de unicidad para mayor precisión.
  @@index([studentId])
  @@index([courseId])
  @@index([termId])
  @@index([sectionId])
}

// ###############################################################
// # 7. EXÁMENES, TAREAS Y PRÁCTICAS
// ###############################################################
model Exam {
  id        Int       @id @default(autoincrement())
  courseId  Int
  sectionId Int
  title     String
  date      DateTime
  duration  Int
  maxScore  Float     @default(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  course      Course       @relation(fields: [courseId], references: [id])
  section     Section      @relation(fields: [sectionId], references: [id])
  submissions Submission[]

  @@map("exam")
  @@index([courseId])
  @@index([sectionId])
}

model Assignment {
  id          Int       @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  dueDate     DateTime
  maxScore    Float     @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@map("assignment")
  @@index([courseId])
}

model Practice {
  id          Int       @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  dueDate     DateTime
  maxScore    Float     @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@map("practice")
  @@index([courseId])
}

model Submission {
  id           Int         @id @default(autoincrement())
  studentId    Int
  examId       Int?
  assignmentId Int?
  practiceId   Int?
  content      String?
  score        Float?
  feedback     String?
  submittedAt  DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt

  // Relaciones
  student    Student     @relation(fields: [studentId], references: [id])
  exam       Exam?       @relation(fields: [examId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  practice   Practice?   @relation(fields: [practiceId], references: [id])

  @@map("submission")
  @@index([studentId])
  @@index([examId])
  @@index([assignmentId])
  @@index([practiceId])
}

// ###############################################################
// # 8. PLANES DE ESTUDIO
// ###############################################################
model StudyPlan {
  id        Int       @id @default(autoincrement())
  studentId Int
  careerId  Int
  name      String
  version   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  student Student           @relation(fields: [studentId], references: [id])
  career  Career            @relation(fields: [careerId], references: [id])
  courses StudyPlanCourse[]

  @@map("study_plan")
  @@index([studentId])
  @@index([careerId])
}

model StudyPlanCourse {
  studyPlanId Int
  courseId    Int
  semester    Int
  isOptional  Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relaciones
  studyPlan StudyPlan @relation(fields: [studyPlanId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])

  @@id([studyPlanId, courseId])
  @@map("StudyPlanCourse")
  @@index([studyPlanId])
  @@index([courseId])
}

// ###############################################################
// # 9. NOTIFICACIONES Y APLICACIONES
// ###############################################################
model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  user User @relation(fields: [userId], references: [id])

  @@map("notification")
  @@index([userId])
}

model Application {
  id        Int       @id @default(autoincrement())
  userId    Int
  careerId  Int
  status    String    @default("pendiente")
  documents String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  career Career @relation(fields: [careerId], references: [id])

  @@map("application")
  @@index([userId])
  @@index([careerId])
}

// ###############################################################
// # 10. REPORTES Y CALIFICACIONES DE PROFESORES
// ###############################################################
model Report {
  id          Int       @id @default(autoincrement())
  userId      Int
  professorId Int
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  user      User      @relation(fields: [userId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])

  @@map("report")
  @@index([userId])
  @@index([professorId])
}

model TeacherRating {
  id          Int       @id @default(autoincrement())
  userId      Int
  professorId Int
  rating      Float
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  user      User      @relation(fields: [userId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])

  @@map("teacher_rating")
  @@index([userId])
  @@index([professorId])
}

// ###############################################################
// # 11. FOROS Y POSTS
// ###############################################################
model Thread {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  user  User   @relation(fields: [userId], references: [id])
  posts Post[]

  @@map("thread")
  @@index([userId])
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  threadId  Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])

  @@map("post")
  @@index([userId])
  @@index([threadId])
}

// ###############################################################
// # 12. PERSONAL ADMINISTRATIVO
// ###############################################################
model AdministrativeStaff {
  id           Int       @id @default(autoincrement())
  personId     Int       @unique
  departmentId Int
  position     String
  hireDate     DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  person     Person     @relation(fields: [personId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@map("administrative_staff")
  @@index([personId])
  @@index([departmentId])
}

// ###############################################################
// # 13. CALENDARIO ACADÉMICO
// ###############################################################
model AcademicCalendar {
  id          Int       @id @default(autoincrement())
  title       String
  startDate   DateTime
  endDate     DateTime
  type        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  @@map("academic_calendar")
}

// ###############################################################
// # 14. REGISTROS DE PAGO
// ###############################################################
model Invoice {
  id        Int       @id @default(autoincrement())
  studentId Int
  amount    Float
  dueDate   DateTime
  status    String    @default("pendiente")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  // Relaciones
  student  Student   @relation(fields: [studentId], references: [id])
  payments Payment[]

  @@map("invoice")
  @@index([studentId])
}

model Payment {
  id            Int       @id @default(autoincrement())
  invoiceId     Int
  amount        Float
  paymentDate   DateTime
  paymentMethod String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  // Relaciones
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payment")
  @@index([invoiceId])
}